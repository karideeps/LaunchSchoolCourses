#!/usr/bin/env node

const { Client } = require('pg');
const PROCESS = require('process');

function logAndExit(err) {
  console.log(err);
  process.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({
      database: 'expenses',
      user: 'karideeps',
      password: '1234'
    });
  }

  async listExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    let res = await this.client.query("SELECT * FROM expenses ORDER BY created_on ASC").catch(err => logAndExit(err));
    this.displayExpenses(res.rows)
    await this.client.end().catch(err => logAndExit(err));
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch(err => logAndExit(err));
    let queryText = 'INSERT INTO expenses (amount, memo) VALUES ($1, $2)';
    let queryValues = [amount, memo]
    await this.client.query(queryText, queryValues).catch(err => this.logAndExit(err));
    await this.client.end().catch(err => logAndExit(err));
  }

  async searchExpenses(term) {
    await this.client.connect().catch(err => logAndExit(err));
    term = '%' + term + '%';
    let queryText = 'SELECT * FROM expenses WHERE memo ILIKE $1';
    let queryValues = [term]
    let res = await this.client.query(queryText, queryValues).catch(err => logAndExit(err));
    this.displayExpenses(res.rows);
    await this.client.end().catch(err => logAndExit(err));
  }

  displayExpenses(rows) {
    rows.forEach(tuple => {
      let columns = [
        `${tuple.id}`.padStart(3),
        tuple.created_on.toDateString().padStart(10),
        tuple.amount.padStart(12),
        tuple.memo
      ];
    
      console.log(columns.join(' | '));
    })
  }
}

class CLI {
  constructor() {
    this.application = new ExpenseData();
  }

  static HELP () {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];
      if (command === 'list') {
        this.application.listExpenses();
      } else if (command === 'add') {
        if (args.length !== 5) {
          console.log('You must provide an amount and memo.')
        } else {
          this.application.addExpense(args[3], args[4]);
        }
      } else if (command === 'search') {
        if (args.length !== 4) {
          console.log('You must provide a search term')
        } else {
          this.application.searchExpenses(args[3]);
        }
      } else {
        this.displayHelp();
      }
  }
}

let cli = new CLI();
cli.run(PROCESS.argv);