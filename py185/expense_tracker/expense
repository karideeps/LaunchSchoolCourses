#!/usr/bin/env python

from datetime import date
from textwrap import dedent
import sys

import psycopg2
from psycopg2 import extras

class ExpenseData:
    def __init__(self):
        self.connection = psycopg2.connect(dbname="expenses")
        self._setup_schema()

    def list_expenses(self):
        with self.connection.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
            result = cursor.fetchall()
            self._display_count(len(result))
            self._display_expenses(result)
            if (len(result) > 1):
                self._display_total(result)

    def add_expense(self, amount, memo):
        with self.connection.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                    INSERT INTO expenses
                    (amount, memo, created_on)
                    VALUES (%s, %s, %s)
                """,
                (amount, memo, date.today())
            )
            self.connection.commit()

    def search_expenses(self, query):
        with self.connection.cursor(cursor_factory=extras.DictCursor) as cursor:
            sql = "SELECT * FROM expenses WHERE memo ILIKE %s"
            cursor.execute(sql, (f"%{query}%",))
            result = cursor.fetchall()
            self._display_count(len(result))
            self._display_expenses(result)
            if (len(result) > 1):
                self._display_total(result)

    def delete_expense(self, idnum):
        with self.connection.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM expenses WHERE id = %s", (idnum,))
            result = cursor.fetchone()
            if result:
                cursor.execute("DELETE FROM expenses WHERE id = %s", (idnum,))
                print("The following expense has been deleted:")
                self._display_expenses([result])
                self.connection.commit()
            else:
                print(f"There is no expense with id '{idnum}'.")

    def delete_all_expenses(self):
        with self.connection.cursor() as cursor:
            cursor.execute("DELETE FROM expenses")
            self.connection.commit()
            print("All expenses have been deleted.")

    def _display_expenses(self, expenses):
        for expense in expenses:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

    def _display_count(self, count):
        if count == 0:
            print("There are no expenses.")
        elif count == 1:
            print("There is 1 expense.")
        else:
            print(f"There are {count} expenses.")

    def _display_total(self, expenses):
        amount_sum = sum([expense["amount"] for expense in expenses])
        print("-" * 50)
        print(f"Total {str(round(amount_sum, 2)).rjust(25)}")

    def _setup_schema(self):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'")
            result = cursor.fetchone()
            if result[0] == 0:
                cursor.execute("""
                    CREATE TABLE expenses(
                        id serial PRIMARY KEY,
                        amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
                        memo text NOT NULL,
                        created_on date NOT NULL
                    )
                """)
                self.connection.commit()

class CLI:
    def __init__(self):
        self.application = ExpenseData()

    def run(self, arguments):
        if not arguments:
            command = None
        else:
            command = arguments.pop(0)

        match command:
            case "add":
                if len(arguments) < 2:
                    print("You must provide an amount and memo.")
                    return
                amount, memo = arguments
                self.application.add_expense(amount, memo)
            case "clear":
                print("This will remove all expenses. Are you sure? (y/n)")
                response = input().strip()
                if response.lower() == "y":
                    self.application.delete_all_expenses()
            case "delete":
                if len(arguments) < 1:
                    print("You must provide an expense ID.")
                    return
                self.application.delete_expense(arguments[0])
            case "list":
                self.application.list_expenses()
            case "search":
                if len(arguments) < 1:
                    print("You must provide a search query.")
                    return
                self.application.search_expenses(arguments[0])
            case "test":
                self.application._setup_schema()
            case _:
                self.display_help()

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
        """).strip("\n"))

if __name__ == "__main__":
    cli = CLI()
    cli.run(sys.argv[1:])